import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from '../components/Context/authContext'
import CartItem from "../components/Feature/CartItem";
import { fetchCart } from "../service/cartService";
import { createPayment, toggleStatus } from "../service/paymentService";

function Cart(){

    const navigate = useNavigate();
    const [cartItems, setCartItems] = useState([]);
    const [selectedItems, setSelectedItems] = useState(new Set());
    const [totalPrice, setTotalPrice] = useState(0); // Áî®‰æÜÂ≠òÂÑ≤Ë≥ºÁâ©ËªäÁ∏ΩÂÉπÊ†º
    const [isProcessingPayment, setIsProcessingPayment] = useState(false);
    const [selectAll, setSelectAll] = useState(false);
    const { isAuthenticated } = useAuth()


    useEffect(() => {
        if (!isAuthenticated) {
            navigate("/sign-in"); // ‚úÖ Ëã•Êú™ÁôªÂÖ•ÔºåË∑≥ËΩâÂà∞ÁôªÂÖ•È†ÅÈù¢
        }
    },[]);


    useEffect(() => {
        const fetchData = async () => {
            try {
                const cartDic = await fetchCart(); // ÂëºÂè´ÂæåÁ´Ø API Áç≤ÂèñË≥ºÁâ©ËªäÂÖßÂÆπ
                const items = cartDic.order.pios;
                setCartItems(items);
                console.log(items)
            } catch (error) {
                console.error("ÁÑ°Ê≥ïËºâÂÖ•Ë≥ºÁâ©ËªäË≥áÊñô", error);
            };
        };
        fetchData();
    }, []);

    const handleAmountChange = async () => {
        const cartDic = await fetchCart(); // ÈáçÊñ∞ÂëºÂè´ÂæåÁ´Ø API Áç≤ÂèñË≥ºÁâ©ËªäÂÖßÂÆπ
        const items = cartDic.order.pios;
        setCartItems(items); // Á¢∫‰øù cartItems ÊòØÊúÄÊñ∞ÁöÑ
        
        const total = items.reduce((sum, item) => {
            if (selectedItems.has(item.product.productId)) {
                return sum + item.product.price * item.amount;
            }
            return sum;
        }, 0);
        setTotalPrice(total);
    };

    const handleCheckChange = async (isChecked, productId) => {
        const updated = new Set(selectedItems)
        if (isChecked) updated.add(productId)
        else updated.delete(productId)

        setSelectedItems(updated)
        // Â¶ÇÊûúÂÖ®ÈÉ®ÂãæÂÆåÔºåheader ‰πüË¶ÅÊâìÂãæ
        setSelectAll(updated.size === cartItems.length)

        // Áî® current cartItems Ë∑ë‰∏ÄÊ¨°Á∏ΩÂÉπ
        const total = cartItems.reduce((sum, item) => {
            return updated.has(item.product.productId)
            ? sum + item.product.price * item.amount
            : sum
        }, 0)
        setTotalPrice(total)
    };

    const handlePayment = async () => {
        if (selectedItems.size === 0) {
            alert("Ë´ãÈÅ∏ÊìáËá≥Â∞ë‰∏ÄÂÄãÂïÜÂìÅÈÄ≤Ë°åÁµêÂ∏≥ÔºÅ");
            return;
        }

        const idsArray = Array.from(selectedItems);
        console.log("üîé IDs to toggle:", idsArray);
    
        setIsProcessingPayment(true); // Ë®≠ÁΩÆÁÇ∫ËôïÁêÜ‰∏≠
    
        // Áç≤ÂèñÈÅ∏‰∏≠ÁöÑÂïÜÂìÅÂêçÁ®±
        const selectedProductNames = cartItems
            .filter(item => selectedItems.has(item.product.productId))
            .map(item => `${item.product.name} $${item.product.price}*${item.amount}`)
            .join('#');
        try {
            // ÂëºÂè´ createPayment ‰æÜËôïÁêÜÊîØ‰ªòÊµÅÁ®ã
            const paymentFormHtml = await createPayment(totalPrice, selectedProductNames);

            
            // ÂãïÊÖãÂâµÂª∫Ë°®ÂñÆ‰∏¶ÊèíÂÖ•Âà∞È†ÅÈù¢
            const formContainer = document.createElement('div');
            formContainer.innerHTML = paymentFormHtml;
            
            // ÊäìÂá∫ hidden input ÁöÑ MerchantTradeNo
            const form = formContainer.querySelector('form');
            const tradeNoInput = form.querySelector('input[name="MerchantTradeNo"]');
            const merchantTradeNo = tradeNoInput.value;
            await toggleStatus(idsArray, merchantTradeNo)

            
            form.setAttribute('target', '_blank'); // ËÆìË°®ÂñÆË∑≥Ëá≥Êñ∞ÂàÜÈ†Å
            document.body.appendChild(form); // ÊèíÂÖ•Âà∞È†ÅÈù¢
            form.submit(); // Êèê‰∫§Ë°®ÂñÆÔºåË∑≥ËΩâÂà∞Á∂†ÁïåÊîØ‰ªòÈ†ÅÈù¢
            navigate("/") // Ë∑≥ËΩâÂà∞È¶ñÈ†Å
        } catch (error) {
            console.error("ÊîØ‰ªòÂ§±Êïó", error);
            alert("ÊîØ‰ªòÈÅéÁ®ã‰∏≠Âá∫ÈåØÔºåË´ãÁ®çÂæåÂÜçË©¶");
        } finally {
            setIsProcessingPayment(false); // ÈáçË®≠ÁÇ∫ÈùûËôïÁêÜÁãÄÊÖã
        }
    };

    const handleSelectAllChange = (isChecked) => {
        setSelectAll(isChecked);
        if (isChecked) {
          // ÊääÊâÄÊúâÂïÜÂìÅ id ÈÉΩÂä†ÂÖ• Set
          const allIds = cartItems.map(item => item.product.productId);
          const newSet = new Set(allIds);
          setSelectedItems(newSet);
          // ÂÖ®ÈÅ∏ÊôÇË®àÁÆó‰∏ÄÊ¨°Á∏ΩÂÉπ
          const total = cartItems.reduce((sum, item) => sum + item.product.price * item.amount, 0);
          setTotalPrice(total);
        } else {
          // ÂèñÊ∂àÂÖ®ÈÅ∏Â∞±Ê∏ÖÁ©∫
          setSelectedItems(new Set());
          setTotalPrice(0);
        }
      };
    

    return (
    <div id="cart" className="bg-[var(--tertiary-color)]">

        {/* Start main */}
            
            {/* Start title */}
            <div id="container" className="container-mid flex justify-center items-center">
                <div id="title" className="text-5xl mt-30 indie-flower-regular text-[var(--primary-color)]">Cart</div>
            </div>
            {/* End title */}

            
            {/* Start cart */}
            <div id="container" className="container-mid flex justify-center items-center pb-15 flex-col max-md:text-sm">

                {/* Start subtitle */}
                <div id="classification" className="border w-full pl-10 py-4 mt-15 grid grid-cols-[4fr_1fr_1fr_1fr_1fr] bg-[var(--primary-color)]">
                    <div>
                        <input
                            type="checkbox"
                            checked={selectAll}
                            onChange={e => handleSelectAllChange(e.target.checked)}
                            className="mr-3 scale-150"
                        />
                        Select/Deselect All
                    </div>
                    <h3 className="text-center">Price</h3>
                    <h3 className="text-center">Quantity</h3>
                    <h3 className="text-center">Total</h3>
                    <h3 className="text-center">Delete</h3>
                </div>
                {/* End subtitle */}

                    
                {/* Start cart item */}
                <div id="cart-item" className="w-full ">
                    {cartItems.map((item, index) => (
                        <CartItem key={item.id} id={item.product.productId} name={item.product.name} price={item.product.price} stock={item.product.stock} itemAmount={item.amount} onAmountChange={handleAmountChange} onClickChange={handleCheckChange} isChecked={selectedItems.has(item.product.productId)}/> //
                    ))}
                </div>
                {/* End cart item */}

                
                {/* Start total price */}
                <div id="classification" className="border w-full pl-10 pr-3 py-1 mt-5 flex justify-between bg-[var(--primary-color)]">
                    <div className="flex items-center">
                        <input
                            type="checkbox"
                            checked={selectAll}
                            onChange={e => handleSelectAllChange(e.target.checked)}
                            className="mr-3 scale-150"
                        />
                        Select/Deselect All
                    </div>
                    <div className="flex items-center gap-2">
                        <h4>Total price:</h4>
                        <h3 className="text-red-600">${totalPrice}</h3>
                        <button className="border py-2 px-6 text-sm rounded-xl cursor-pointer" onClick={handlePayment} disabled={isProcessingPayment} >{isProcessingPayment ? "Processing..." : "Pay for it"}</button>
                    </div>
                </div>
                {/* End total price */}
                
            </div>
            {/* End cart */}

            {/* End main */}

        </div>
    )
}
export default Cart;